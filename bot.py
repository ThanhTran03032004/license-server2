from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import Application, MessageHandler, filters, CallbackContext  # Ch√∫ √Ω import Application v√† filters
import re, time, json, os, subprocess

BOT_TOKEN = '7685475112:AAEgA7YO5v0HSfDapeI8hcCkM5ju3EHxkmI'
ADMIN_CHAT_ID = 5154548822  # Thay b·∫±ng chat_id th·∫≠t c·ªßa m√†y

DATA_FILE = 'activations.json'
pending_mac = {}  # {chat_id: mac}

# ====== JSON Handling ======
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

# ====== GIT PUSH t·ª± ƒë·ªông ======
def git_push():
    try:
        subprocess.check_call(['git', 'add', DATA_FILE])
        subprocess.check_call(['git', 'commit', '-m', 'Update activation list'])
        subprocess.check_call(['git', 'push'])
    except subprocess.CalledProcessError as e:
        print("‚ùå Git push failed:", e)

# ====== Bot Logic ======
async def handle_message(update: Update, context: CallbackContext):
    global pending_mac
    text = update.message.text.strip()
    chat_id = update.message.chat_id

    # Ch·∫∑n ng∆∞·ªùi kh√¥ng ph·∫£i admin
    if chat_id != ADMIN_CHAT_ID:
        await update.message.reply_text("üö´ Kh√¥ng c√≥ quy·ªÅn.")
        return

    # Nh·∫≠n MAC t·ª´ client g·ª≠i l√™n
    if "MAC:" in text.upper():
        match = re.search(r'MAC:\s*`?([A-Fa-f0-9]{6,})`?', text)
        if match:
            mac = match.group(1).upper()
            pending_mac[chat_id] = mac
            await update.message.reply_text(
                f"üìå Nh·∫≠n y√™u c·∫ßu k√≠ch ho·∫°t:\n"
                f"MAC: `{mac}`\n"
                f"Reply v·ªõi: ACTIVE_1 | ACTIVE_7 | ACTIVE_14 | ACTIVE_30\n"
                f"ƒê·ªÉ xo√°: DELETE",
                parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text("‚ùå Kh√¥ng t√¨m th·∫•y MAC.")
        return

    # K√≠ch ho·∫°t
    if text.startswith("ACTIVE_"):
        if chat_id not in pending_mac:
            await update.message.reply_text("‚ùå Kh√¥ng c√≥ MAC n√†o ƒëang ch·ªù k√≠ch ho·∫°t.")
            return

        mac = pending_mac[chat_id]
        try:
            days = int(text.split("_")[1])
        except:
            await update.message.reply_text("‚ùå C√∫ ph√°p sai. D√πng ACTIVE_1, ACTIVE_7... ho·∫∑c ACTIVE_30.")
            return

        data = load_data()
        expire_time = int(time.time()) + days * 86400
        data[mac] = expire_time
        save_data(data)
        git_push()

        await update.message.reply_text(
            f"‚úÖ ƒê√£ k√≠ch ho·∫°t `{mac}` trong {days} ng√†y.",
            parse_mode=ParseMode.MARKDOWN)
        del pending_mac[chat_id]
        return

    # Xo√° MAC nh∆∞ng kh√¥ng x√≥a h·∫øt m√† gi·ªØ l·∫°i c√°c d·ªØ li·ªáu kh√°c
    if text.startswith("DELETE"):
        if chat_id not in pending_mac:
            await update.message.reply_text("‚ùå Kh√¥ng c√≥ MAC n√†o ƒë·ªÉ xo√°.")
            return

        mac = pending_mac[chat_id]
        data = load_data()

        # Ki·ªÉm tra xem MAC c√≥ t·ªìn t·∫°i trong d·ªØ li·ªáu hay kh√¥ng
        if mac in data:
            del data[mac]  # X√≥a MAC kh·ªèi d·ªØ li·ªáu
            save_data(data)  # L∆∞u l·∫°i d·ªØ li·ªáu sau khi ƒë√£ xo√°
            git_push()  # ƒê·∫©y thay ƒë·ªïi l√™n GitHub
            await update.message.reply_text(f"üóë ƒê√£ xo√° `{mac}` kh·ªèi danh s√°ch k√≠ch ho·∫°t.", parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text("‚ö† MAC ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t ho·∫∑c ƒë√£ b·ªã xo√°.")
        
        del pending_mac[chat_id]  # Xo√° MAC kh·ªèi danh s√°ch pending
        return

    # Default
    await update.message.reply_text("ü§ñ D√πng ACTIVE_1 / ACTIVE_7 / ACTIVE_14 / ACTIVE_30 ho·∫∑c DELETE ƒë·ªÉ x·ª≠ l√Ω MAC.")

# ====== Main Bot ======
def main():
    application = Application.builder().token(BOT_TOKEN).build()  # S·ª≠ d·ª•ng Application m·ªõi cho v20.x
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))  # Th√™m handler cho message
    print("ü§ñ Bot ƒëang ch·∫°y...")
    application.run_polling()  # Ch·∫°y bot

if __name__ == '__main__':
    main()
